//client detailed
    string C_Customer_Name;
    string C_Site_Name;
    string C_Customer_Code;
    string C_Date
    string C_Transaction_type
    string C_Process_type
    string C_Quantity
    string C_ID_Processed
    string C_Total_Notes
    string C_Total_Coins
    string C_Total_Cash
    string C_500
    string C_200
    string C_100
    string C_50
    string C_20
    string C_10
    string C_5
    string C_2
    string C_1
    string C_50c
    string C_20c
    string C_10c
    string C_5c
    string C_2c
    string C_1c
    string C_Mixed Coin
    string C_BIC
    string C_IBAN
    string C_PAYDAY

//dynamic trans
    string D_Client_Location
    string D_Site_No
    string D_Deposit_Date
    string D_Ref_Num_PIS
    string D_STC
    string D_Cheques
    string D_GBP
    string D_Euro_Notes_Total
    string D_Euro_Coin_Total
    string D_Cash_Total
    string D_Bag
    string D_Difference
    string D_Comments


    void test(int INDEX){
    //printf("Starting test.\n");
    string tempString;
    Row tempCliRow(INDEX, C_Cols_Total);
    int NewIt;
    if(INDEX > 0){
        NewIt = 1;
    }else{
        NewIt = 0;
    }
    int OldIt = NewIt;
    //get the row as a string
    getline(sCli, tempString, '\r');
    if(tempString.substr(0, 12)=="End of Report"){
        return;
    }

    //printf("Long Client string: %s\n", tempString.c_str());

    //parse the string
    for(int i = 0; i<C_Cols_Total; i++){
        while(  tempString[NewIt] != ',' &&
                tempString[NewIt] != '\r' && 
                //tempString[NewIt] != '\n' && 
                tempString[NewIt]   ){
            if(NewIt > strlen(tempString.c_str())){
                break;
            }
            if(tempString[NewIt] == '"'){
                NewIt++;
                while(  tempString[NewIt] != '"'&&
                        tempString[NewIt] ){
                    NewIt++;
                }
                NewIt++;
            }
            else{
                NewIt++;
            }
        }
        if(NewIt > strlen(tempString.c_str())){
                break;
        }
        //add the entry to the row
        string tempSub = tempString.substr(OldIt, NewIt-OldIt);
        //remove endline
        // if(i == D_Client_Location-1){
        //     NewIt--;
        // }

        //printf("Adding Sub string: %s\n", tempSub.c_str());
        tempCliRow.add(tempSub);
        NewIt++;
        OldIt = NewIt;
    }

    tempCliRow.fill();

    cli_row_list.push_back(tempCliRow);
    //printf("Testing Client Row: %s\n\n",(cli_row_list[index]).col_list[8].c_str());

    // printf("Printing Cols Client from Row.\n");
    // for(int i = 0; i<D_Client_Location; i++){
    //     printf("Col %i: %s\n", i, tempRow.col_list[i].c_str());
    // }
    // printf("Finished Printing Cols from Row.\n");

    //------------------------------------

    Row tempDynRow(INDEX, D_Cols_Total);

    if(INDEX > 0){
        NewIt = 1;
    }else{
        NewIt = 0;
    }
    OldIt = NewIt;
    //get the row as a string
    getline(sDyn, tempString, '\r');

    //printf("Long Dynamic string: %s\n", tempString.c_str());

    //parse the string
    for(int i = 0; i<D_Cols_Total; i++){
        while(  tempString[NewIt] != ',' &&
                tempString[NewIt] != '\r' && 
                //tempString[NewIt] != '\n' && 
                tempString[NewIt]  ){
            if(tempString[NewIt] == '"'){
                NewIt++;
                while(tempString[NewIt] != '"'){
                    NewIt++;
                }
                NewIt++;
            }
            else{
                NewIt++;
            }
        }
        //add the entry to the row
        string tempSub = tempString.substr(OldIt, NewIt-OldIt);
        //remove endline
        // if(i == COLS_total-1){
        //     NewIt--;
        // }
        printf("Adding Sub string %i: %s\n", i, tempSub.c_str());
        tempDynRow.add(tempSub);
        //printf("Testing Sub string %i: %s\n", i, tempDynRow.col_list[i].c_str());
        
        NewIt++;
        OldIt = NewIt;
    }

    // printf("Printing Dynamic Cols from Row.\n");
    // for(int i = D_Client_Location; i<COLS_total; i++){
    //     printf("Col %i: %s\n", i, tempRow.col_list[i].c_str());
    // }
    // printf("Finished Printing Cols from Row.\n");

    // printf("Printing ALL Cols from Row %i.\n", INDEX);
    // for(int i = 0; i<COLS_total; i++){
    //     printf("Col %i: %s\n", i, tempRow.col_list[i].c_str());
    // }

    //printf("Finished Printing Cols from Row %i.\n", INDEX);

     //printf("Adding Row to Table.\n");
    //Add the Row to the Table
    tempDynRow.fill();
    dyn_row_list.push_back(tempDynRow);
    printf("Testing Dyn Row: %s\n\n",(dyn_row_list[index]).col_list[5].c_str());
    //printf("Finished Adding Row.\n");


    //return 1;
    //printf("Ending test.\n");
}




// table::table(string Dynamic, string Client){
//     //index = 0;
//     //open the file streams
//     sCli.open(Client);
//     sDyn.open(Dynamic);
//     //check they opened correcly
//     if(!sCli.is_open()){
//         printf("Client Activity File did not open.\n");
//         return;
//     }
//     if(!sDyn.is_open()){
//         printf("Dynamic Transatic File did not open.\n");
//         return;
//     }
//     //clear the useless content at the top of the file
//     //(going to test input data first, will uncomment later - Richie)
//     string temp;
//     // for(int i = 0l i<1; i++){
//     //     getline(sCli, temp '\r');
//     // }
//     // for(int i = 0; i<4; i++){
//     //     getline(sDyn, temp '\r');
//     // }

//     temp = "";

//     while(!sCli.eof() && !sDyn.eof()){
//         printf("adding %i row\n",index);
//         add(index);
//         //test(index);
//         index++;
//     }
// }
//-----------------------------------------------------------------

/*cli_row_list[i].col_list[7].compare(dyn_row_list[j].col_list[13]) != 0||*/
                        cli_row_list[i].col_list[8].compare(dyn_row_list[j].col_list[10]) != 0||
                        cli_row_list[i].col_list[9].compare(dyn_row_list[j].col_list[11]) != 0||
                        cli_row_list[i].col_list[10].compare(dyn_row_list[j].col_list[12])!= 0))

//
// int table::align2(){
//     int swapped = 0;
//     int doubled = 0;
//     for(int i = 0; i < cli_rows; i++){
//         //check if the rows match
//         if( cli_row_list[i].col_list[C_ID_Processed].compare(dyn_row_list[i].col_list[D_Bag]) != 0){
//             int j = i;
//             while ( j<dyn_rows-1 && ( cli_row_list[i].col_list[C_ID_Processed].compare(dyn_row_list[j].col_list[D_Bag]) != 0){
//                 j++;
//             }
//             if(j < dyn_rows-1){
                    
//                     if(cli_row_list[i].col_list[C_Total_Cash].compare(dyn_row_list[j].col_list[D_Cash_Total])== 0){
//                         swapped = 1;
//                         dyn_row_list[i].swap(dyn_row_list[j]);
//                         dyn_row_list[i].index = i;
//                         printf("Swapped %i with %i\n", i, j);
//                     }
//                     else{
//                         Row tempRow = cli_row_list[i];
//                         cli_row_list.insert(cli_row_list.begin() + i,tempRow)
//                         cli_row_list[i+1].col_list[]
//                     }
                    
//                 }
//                 else{
//                     printf("Couldnt Swap %i, reached end of dyn\n", i);
//                 }

//         }


//         if( cli_row_list[i].col_list[C_ID_Processed].compare(dyn_row_list[i].col_list[D_Bag]) != 0){   
//                 //if they dont
//                 int j = i;
//                 while ( j<dyn_rows-1 && ( 
//                         cli_row_list[i].col_list[C_ID_Processed].compare(dyn_row_list[j].col_list[D_Bag]) != 0||
//                         cli_row_list[i].col_list[C_Total_Notes].compare(dyn_row_list[j].col_list[D_Euro_Notes_Total]) != 0||
//                         cli_row_list[i].col_list[C_Total_Coins].compare(dyn_row_list[j].col_list[D_Euro_Coin_Total]) != 0||
//                         cli_row_list[i].col_list[C_Total_Cash].compare(dyn_row_list[j].col_list[D_Cash_Total])!= 0    )){
//                             //if(j < dyn_rows-1){
//                                 j++;
//                             //}
//                             //else{
//                               //  printf("AHHHHHHHH\n");
//                                // break;
//                                 //}
//                         }
//                 if(j < dyn_rows-1){
//                     swapped = 1;
//                     dyn_row_list[i].swap(dyn_row_list[j]);
//                     dyn_row_list[i].index = i;
//                     printf("Swapped %i with %i\n", i, j);
//                 }
//                 else{
//                     printf("Couldnt Swap %i, reached end of dyn\n", i);
//                 }
//             }
//     }
//     if(swapped == 0){
//         printf("Nothing Swapped\n");
//     }
//     return swapped;
// }

//-----------------------------------------------------------------